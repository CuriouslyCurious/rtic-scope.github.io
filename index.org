#+TITLE: RTIC Scope
#+AUTHOR: Viktor Vilhelm Sonesten
#+EMAIL: vikson-6@student.ltu.se


*NOTE:* This document is a work in progress.

-----

* About
*RTIC Scope* is a zero-overhead framework for recording and analyzing execution traces from [[https://rtic.rs][RTIC applications]] on ARM Cortex-M targets.
The lack of overhead is achieved by exploiting the ITM/DWT subsystem as defined by the [[https://developer.arm.com/documentation/ddi0403/ed/][ARMv7-M Architecture Reference Manual]], Appendix D4.

** Features
The framework is split into three chief components: the canonical backend, the frontend(s), and the target-side tracing crate, ~rtic-trace~.

- The backend :: is a host-side (i.e., the system that programs the target device) application which exposes two operations:
  - Tracing :: where the execution trace is captured from the target via a serial device and saved to file.
  - Replaying :: where previously recorded traces are replayed for postmortem and offline analysis.
- Frontend(s) :: While tracing and replaying, a trace can be forwarded to a set of frontends via Unix domain sockets, where virtually endless analytics can be applied.
  Consider, for example, a graphical frontend alike an oscilloscope or a logic analyzer, but instead of signals the RTIC tasks and their executation status (running, scheduled, preempted) is plotted.

  A dummy frontend which applies the backend-frontend API is offered out of the box.
  It is available for debug and reference purposes.
  You are encouraged to implement your own frontend, or adapt one developed by the community.

  At present, information only flows from the backend to the frontend.
  This is subject to change following a post-v1.0.0 release.
  With bidirectional communication, a frontend can for example apply a complex hardware-in-the-loop testing suite.
  Please refer to the [[Roadmap][project roadmap]].
- The target-side tracing crate :: ~rtic-trace~, is an small auxiliary crate applied to the target application under trace.
  It exposes:
  - the ~setup~ module :: which is used in the RTIC =#[init]= function.
    It ensures that the target is properly configured to yield trace information to the host system after =#[init]= is exited.
  - the =#[trace]= macro :: which is used to trace RTIC software tasks.
    While hardware tasks are traced "free of charge" (see [[How it works]]), software tasks are traced by writing a single =u32= variable.

  The aim of ~rtic-trace~ (and RTIC Scope as a whole) is to require minimal boilerplate to your RTIC applications.

** Project repositories/crates
The framework is managed under the [[https://github.com/rtic-scope][RTIC Scope organization on GitHub]].
Below is a list of the chief repositories that constitute the project.
Any other crates listed under the organization but not here are branches of other repositories pending upstream merge.

- [[https://github.com/rtic-scope/cargo-rtic-scope][cargo-rtic-scope]] :: The RTIC Scope backend which builds the target application, recovers trace information, traces the target, replays traces, etc.
- [[https://github.com/rtic-scope/rtic-trace][rtic-trace]] :: The ~no_std~ crate used to configure the target for tracing purposes.
- [[https://github.com/rtic-scope/examples][examples]] :: A set of example target applications where the RTIC Scope framework is applied. These are also [[Examples][documented below]].
- [[https://github.com/rtic-scope/frontend-dummy][frontend-dummy]] :: A "noop" frontend implementation that writes received =api::EventChunk= structs to stderr with nanosecond timestamp information.
- [[https://github.com/rtic-scope/api][api]] :: The common API used between the RTIC Scope backend and all frontends.
- [[https://github.com/rtic-scope/itm-decode][itm-decode]] :: A host-side library that decodes the binary trace stream received from the target to workable Rust structures.
- [[https://github.com/rtic-scope/rfcs][rfcs]] :: A catch-all meta-repository for discussions that encompasses more than a single repository.
- [[https://github.com/rtic-scope/rtic-scope.github.io][rtic-scope.github.io]] :: The source code for this page.

* Requirements
** Hardware
- A target device with an ARM Cortex-M4 MCU and available asynchronous trace pin output.
- Serial hardware (The [[https://github.com/probe-rs/hs-probe][hs-probe]] will be supported).

** Software
- A Linux-based operating system on which a recent Rust toolchain works and serial devices are POSIX-compliant.

* Getting started
#+begin_src fundamental
  $ cargo install cargo-rtic-scope
  $ cargo install rtic-scope-frontend-dummy
#+end_src

** Examples
*** blinky
Assuming Nucleo and hs-probe...
#+begin_src fundamental

#+end_src

* How it works
** ITM/DWT subsystem
Over serial communication a stream of back-to-back ITM packets are received.
Each packet contains a header and a number of payload bytes.
Of special interest are exception trace packets:
#+begin_quote
The DWT unit can generate an Exception trace packet whenever then processor enters, exits, or returns to an exception.
--- Appendix D4.3.2
#+end_quote
This packet then contains one of the exception numbers listed in the table below.
In an RTIC application, tasks are bound to these numbers.

#+CAPTION: ARMv7-M Exception numbers
#+ATTR_HTML: :rules all
| Exception number | Exception name/label |
|------------------+----------------------|
|                1 | Reset                |
|                2 | NMI                  |
|                3 | HardFault            |
|                4 | MemManage            |
|                5 | BusFault             |
|             7-10 | Reserved             |
|               11 | SVCall               |
|               12 | DebugMonitor         |
|               13 | Reserved             |
|               14 | PendSV               |
|               15 | SysTick              |
|               16 | External interrupt 0 |
|                . | .                    |
|                . | .                    |
|                . | .                    |
|           16 + N | External interrupt N |
|------------------+----------------------|

Henceforth, this document will refer to these exceptions/interrupt numbers as interrupt request (IRQ) numbers.

Software tasks are similarly traced, but come at a cost of a =u32= variable write when entering and exiting the task.
This variable is registered as a watch address in the DWT subsystem.
Any writes to this address are intercepted, and the new value is encapsulated in an ITM packet along with the ID of the DWT comparator.

** Host-side information recovery
The IRQ numbers we receive in a packet must be associated with the RTIC task that changed execution status.
This is done in a preparatory step before the target is flashed and traced.
For example, when executing =cargo rtic-scope --bin blinky --serial /dev/ttyUSB=:
1. ~blinky~ is build via a regular =cargo build --bin blinky=.
2. The RTIC application declaration, =#[app(...)] mod app {...}=, is parsed from ~blinky~'s source code.
   From this declaration, the =#[app(device = ...)]= argument is extracted along with the IRQ label from each =#[task(binds = ...)]= macro occurance.
   Additionally, software tasks traced using the =#[trace]= macro are enumerated and mapped.
   For example, =device = stm32f4::stm32f401=, =binds = SysTick=, and =binds = EXTI1= might be extracted.
   Here, each IRQ label is associated with the RTIC task it is bound to.

   This parsing step places some restrictions on how the source code for an RTIC application can be written. Refer to [[Limitations]].
3. An adhoc cdylib crate is then built which translates IRQ labels to IRQ numbers.
   For example, the adhoc crate might contain
   #+begin_src rust
     use stm32f4::stm32f401::Interrupt;

     // Only external interrupts need be written here.
     // Exceptions-bound tasks are resolved using the above table.

     #[no_mangle]
     pub extern fn rtic_scope_func_EXTI1() -> u8 {
         Interrupt::EXTI1.nr()
     }
   #+end_src
   After loading the resultant shared library and calling all functions, a ~IRQ number -> IRQ label -> RTIC task~ map ("task map") is yielded.
4. ~blinky~ is flashed unto the target, and tracing begins after a timestamped reset.
5. When an ITM packet is received:
   1. it is first deserialized to a Rust =struct= representation;
   2. this struct is flushed to file;
   3. and lastly translated to an =api::EventChunk= by help of the task map and reset timestamp, and forwarded to any configured frontends.
      This =struct= contains an absolute timestamp and list of events that occured at that time.

* Limitations
** RTIC application constrains
** Target-side overhead
- =u32= address write on traced software task enter and exit.
- Software task tracing requires a dedicated DWT comparator.

* Frequently asked questions
- Where are all build artifacts stored? :: Most likely under ~target/~, assuming the current working directory is a crate containing target applications.
  The target directory can be overridden via =TARGET_DIR= or the =--target-dir= option.
  Note that the RTIC application will be rebuilt to this location.

  ~cargo rtic-scope~ also respecets [[https://doc.rust-lang.org/cargo/reference/config.html][Cargo's configuration system]].
- Where are all traces saved to? :: Recorded traces are serialized to JSON to ~/path/to/target-dir/rtic-traces~, which means ~target/rtic-traces~ by default.
  This directory can be overridden via the ~--trace-dir~ option.
  The same option  is used to replay traces located in non-default location.

  *NOTE:* any traces saved to the target directory will be lost on a =cargo clean=.

* Roadmap

* Publications

* License
TBA

* Contact, bug reports and contributions
Bug reports and contributions are welcome. Please file it under the [[Project repositories/crates][relevant repository]].

Project maintainer can be reached via email at [[mailto:vikson-6@student.ltu.se][<vikson-6@student.ltu.se>]].

-----
